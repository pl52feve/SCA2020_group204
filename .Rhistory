rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata$
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata$is_repeated_guest <- string::str_replace_all (clndata$is_repeated_guest),pattern="no",repl="0")
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata$is_repeated_guest <- string::str_replace_all (clndata$is_repeated_guest);pattern="no";repl="0")
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest),pattern="no",repl="0")
install.packages("stringr")
#library (stringr)
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest),pattern="no",repl="0")
#library (stringr)
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata$is_repeated_guest <- string::rstr_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
#library (stringr)
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata$is_repeated_guest <- stringr::rstr_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
#library (stringr)
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
clndata$is_repeated_guest
clndata
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
#library (stringr)
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
clndata
rawdata = read.csv("data_sss.csv")
#Datenbereinigung
clndata = rawdata
clndata
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
#Datenbereinigung
clndata
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
clndata = rawdata
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
clndata$is_repeated_guest
summary(clndata$is_repeated_guest)
summary(rawdata)
str(rawdata)
as.table(clndata)
table(clndata)
table(clndata$is_repeated_guest)
table(rawdata$is_repeated_guest)
clndata = clndata[!(clndata$stay_totaldays == 0),]
clndata
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
rawdata = read.csv("data_sss.csv")
clndata = rawdata
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata
rawdata = read.csv("data_sss.csv")
# Packages laden
library(ggplot2)
library(dplyr)
library(tidyr)
#Tabelle einlesen
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
rawdata[rawdata$adults == 0 & rawdata$children == 0,]
# to do
clndata = rawdata
# Feature Engineering
clndata$stays_in_nights = clndata$stays_in_week_nights + clndata$stays_in_weekend_nights
# ... und viele weitere
#wie viele wurden insgesamt gecancelled
table(cleandata$is_canceled)
cleandata
#wie viele wurden insgesamt gecancelled
table(clndata$is_canceled)
cat("\n")
#ggf. Korrelationen abchecken
cor(clndata$is_canceled, clndata[, c("lead_time", "stays_in_nights", "babies")])
# ... und viele weitere
#ggf Haeufigkeitstabellen ansehen
meal_types = aggregate(is_canceled ~ meal, clndata, sum)
meal_types$amount = table(clndata$meal)
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
#library (stringr)
#Datenbereinigung
clndata = rawdata
#repeated_guest "no" mit "0" ersetzen
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
summary(clndata)
RegionsverkaufGesamt = aggregate(reserved_room_type ~ adr,data=clndata, mean)
RegionsverkaufGesamt = aggregate(reserved_room_type ~ adr,data=clndata, mean)
RegionsverkaufGesamt = aggregate(reserved_room_type ~ adr,data=clndata, mean)
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
#library (stringr)
#Datenbereinigung
clndata = rawdata
#repeated_guest "no" mit "0" ersetzen
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
summary(clndata)
```RegionsverkaufGesamt = aggregate(reserved_room_type ~ adr,data=clndata, mean)
#library (stringr)
#Datenbereinigung
clndata = rawdata
#repeated_guest "no" mit "0" ersetzen
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
summary(clndata)
RegionsverkaufGesamt = aggregate(reserved_room_type ~ adr,data=clndata, mean)
RegionsverkaufGesamt
RegionsverkaufGesamt = aggregate(adr ~ reserved_room_type,data=clndata, mean)
RegionsverkaufGesamt
```~
RegionsverkaufGesamt = aggregate(adr ~ reserved_room_type,data=clndata, mean)
RegionsverkaufGesamt
RegionsverkaufGesamt = aggregate(adr ~ reserved_room_type,data=clndata, mean)
RegionsverkaufGesamt
adr_roomtype = aggregate(adr ~ reserved_room_type,data=clndata, mean)
adr_roomtype
adr_assigned_roomtype = aggregate(adr ~ assigned_room_type,data=clndata, mean)
adr_assigned_roomtype
agent = aggregate(is_cancelled ~ agent,data=clndata, mean)
agent = aggregate(is_canceled ~ agent,data=clndata, mean)
agent
company = aggregate(is_canceled ~ company,data=clndata, mean)
company
deposit = aggregate(is_canceled ~ deposit_type,data=clndata, mean)
deposit
costumer_type = aggregate(is_canceled ~ costumer_type,data=clndata, mean)
customer_type = aggregate(is_canceled ~ customer_type,data=clndata, mean)
customer_type
previous_bookings_not_canceled = aggregate(is_canceled ~ previous_bookings_not_canceled,data=clndata, mean)
previous_bookings_not_canceled
is_repeated_guest = aggregate(is_canceled ~ is_repeated_guest,data=clndata, mean)
is_repeated_guest
distribution_channel = aggregate(is_canceled ~ distribution_channel,data=clndata, mean)
distribution_channel
market_segment = aggregate(is_canceled ~ market_segment,data=clndata, mean)
market_segment
meal = aggregate(is_canceled ~ meal,data=clndata, mean)
meal
country = aggregate(is_canceled ~ country,data=clndata, mean)
country
head(country[c("IFR")],5)
country
head(country[c("is_canceled")],5)
country <- country[order(country$is_canceled,decreasing=T),]
head(country[c("is_canceled")],5)
country
country = aggregate(is_canceled ~ country,data=clndata, mean)
country
country <- country[order(country$is_canceled,decreasing=T),]
head(country[c("country","is_canceled")],5)
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
#library (stringr)
#Datenbereinigung
clndata = rawdata
#repeated_guest "no" mit "0" ersetzen
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
summary(clndata)
#library (stringr)
#Datenbereinigung
clndata = rawdata
#repeated_guest "no" mit "0" ersetzen
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
summary(clndata)
country = aggregate(is_canceled ~ country,data=clndata, mean)
country <- country[order(country$is_canceled,decreasing=T),]
country
arrival_date_year = aggregate(is_canceled ~ arrival_date_year,data=clndata, mean)
arrival_date_year
arrival_date_month = aggregate(is_canceled ~ arrival_date_month,data=clndata, mean)
arrival_date_month
hotel = aggregate(is_canceled ~ hotel,data=clndata, mean)
hotel
AggregateIFR = aggregate(clndata$adr, list(clndata$reserved_room_type,clndata$adults), mean)
AggregateIFR
AggregateIFR = aggregate(clndata$adr, list(clndata$reserved_room_type,clndata$adults), mean)
AggregateIFR
AggregateIFR1 = aggregate(clndata$adr, list(clndata$reserved_room_type,clndata$adults), median)
AggregateIFR1
AggregateIFR2 = aggregate(clndata$adr, list(clndata$reserved_room_type,clndata$adults,clndata$meal), median)
AggregateIFR2
AggregateIFR2 <- AggregateIFR2[order(AggregateIFR2$Group.1,decreasing=T),]
AggregateIFR2
AggregateIFR2 <- subset(AggregateIFR, !Grou.3 == "Undefined")
AggregateIFR2 <- subset(AggregateIFR, !Group.3 == "Undefined")
AggregateIFR2
AggregateIFR2 <- subset(AggregateIFR2, !Group.3
== "Undefined")
AggregateIFR2
AggregateIFR2 <- subset(AggregateIFR2, !Group.2
== "0")
AggregateIFR2
AggregateIFR2 <- subset(AggregateIFR2, !x
== "0")
AggregateIFR2
clndatacity = subset(clndata, hotel== "Resort Hotel")
clndataresort = subset(clndata, hotel== "City Hotel")
clndatacity
AggregateIFR1 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults), median)
AggregateIFR1
AggregateIFR2 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults,clndata$meal), median)
#median passt sehr gut
AggregateIFR1 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults), median)
AggregateIFR1
AggregateIFR2 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults,clndatacity$meal), median)
AggregateIFR2
AggregateIFR2 <- AggregateIFR2[order(AggregateIFR2$Group.1,decreasing=T),]
AggregateIFR2 <- subset(AggregateIFR2, !Group.3
== "Undefined")
AggregateIFR2 <- subset(AggregateIFR2, !Group.2
== "0")
AggregateIFR2 <- subset(AggregateIFR2, !x
== "0")
AggregateIFR1 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults), median)
AggregateIFR1
AggregateIFR2 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults,clndatacity$meal), median)
AggregateIFR2
AggregateIFR2 <- subset(AggregateIFR2, !Group.3
== "Undefined"
AggregateIFR2
AggregateIFR2 <- subset(AggregateIFR2, !Group.3
== "Undefined")
AggregateIFR2
AggregateIFR2 <- subset(AggregateIFR2, !Group.2 == "0")
AggregateIFR2 <- subset(AggregateIFR2, !x == "0")
AggregateIFR2
AggregateIFR2 <- AggregateIFR2[order(AggregateIFR2$Group.1,decreasing=T),]
AggregateIFR2
AggregateIFR2 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults,clndatacity$children,clndatacity$meal), median)
AggregateIFR2
AggregateIFR2 <- AggregateIFR2[order(AggregateIFR2$Group.1,decreasing=T),]
AggregateIFR2 <- subset(AggregateIFR2, !Group.3
== "Undefined")
AggregateIFR2 <- subset(AggregateIFR2, !Group.2 == "0")
AggregateIFR2 <- subset(AggregateIFR2, !x == "0")
AggregateIFR2
AggregateIFR2 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults,clndatacity$children,clndatacity$meal), median)
AggregateIFR2
AggregateIFR2 <- AggregateIFR2[order(AggregateIFR2$Group.1,decreasing=T),]
AggregateIFR2 <- subset(AggregateIFR2, !Group.4
== "Undefined")
AggregateIFR2 <- subset(AggregateIFR2, !Group.2 == "0")
AggregateIFR2 <- subset(AggregateIFR2, !x == "0")
AggregateIFR2
kable(AggregateIFR2, caption = "AggregateOTDShangh")
library("GGally")
library("knitr")
kable(AggregateIFR2, caption = "AggregateOTDShangh")
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
#library (stringr)
#Datenbereinigung
clndata = rawdata
#repeated_guest "no" mit "0" ersetzen
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
summary(clndata)
clndatacity = subset(clndata, hotel== "Resort Hotel")
clndataresort = subset(clndata, hotel== "City Hotel")
adr_roomtype = aggregate(adr ~ reserved_room_type,data=clndata, mean)
adr_roomtype
adr_assigned_roomtype = aggregate(adr ~ assigned_room_type,data=clndata, mean)
adr_assigned_roomtype
agent = aggregate(is_canceled ~ agent,data=clndata, mean)
agent
company = aggregate(is_canceled ~ company,data=clndata, mean)
company
deposit = aggregate(is_canceled ~ deposit_type,data=clndata, mean)
deposit
customer_type = aggregate(is_canceled ~ customer_type,data=clndata, mean)
customer_type
previous_bookings_not_canceled = aggregate(is_canceled ~ previous_bookings_not_canceled,data=clndata, mean)
previous_bookings_not_canceled
is_repeated_guest = aggregate(is_canceled ~ is_repeated_guest,data=clndata, mean)
is_repeated_guest
distribution_channel = aggregate(is_canceled ~ distribution_channel,data=clndata, mean)
distribution_channel
market_segment = aggregate(is_canceled ~ market_segment,data=clndata, mean)
market_segment
meal = aggregate(is_canceled ~ meal,data=clndata, mean)
meal
country = aggregate(is_canceled ~ country,data=clndata, mean)
country
country <- country[order(country$is_canceled,decreasing=T),]
head(country[c("country","is_canceled")],5)
arrival_date_year = aggregate(is_canceled ~ arrival_date_year,data=clndata, mean)
arrival_date_year
arrival_date_month = aggregate(is_canceled ~ arrival_date_month,data=clndata, mean)
arrival_date_month
hotel = aggregate(is_canceled ~ hotel,data=clndata, mean)
hotel
AggregateIFR = aggregate(clndata$adr, list(clndata$reserved_room_type,clndata$adults), mean)
AggregateIFR
#median passt sehr gut
AggregateIFR1 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults), median)
AggregateIFR1
AggregateIFR2 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults,clndatacity$children,clndatacity$meal), median)
AggregateIFR2
AggregateIFR2 <- AggregateIFR2[order(AggregateIFR2$Group.1,decreasing=T),]
AggregateIFR2 <- subset(AggregateIFR2, !Group.4
== "Undefined")
AggregateIFR2 <- subset(AggregateIFR2, !Group.2 == "0")
AggregateIFR2 <- subset(AggregateIFR2, !x == "0")
kable(AggregateIFR2, caption = "AggregateOTDShangh")
# Anzahl einfügen
#Kapazitäten der beiden Hotels speichern
capLis = data.frame(Zimmer = 403,
Parkpl = 20,
Sitzpl = 200,
Babysitzpl = 20)
capAlga = data.frame(Zimmer = 318,
Parkpl = 50,
Sitzpl = 800,
Babysitzpl = 10)
#tests
#was ist mit Typ undefined?
unique(rawdata$market_segment)
unique(rawdata$meal)
unique(rawdata$distribution_channel)
unique(rawdata$country) #hier heißts NULL
#andere Anzahl belegter Raumtypen als reservierte?
unique(rawdata$reserved_room_type)
unique(rawdata$assigned_room_type)
#Kinder oder Babies ohne Erwachsenen da?
rawdata[rawdata$adults == 0 & (rawdata$children != 0 | rawdata$babies !=0),]
#das CHeck in Datum als as.Date Datenformat abspeichern
Sys.setlocale("LC_ALL","English")
rawdata$checkin_date = as.Date(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")
#0–6 day of the week, starting on Sunday.
rawdata$wkday=as.POSIXlt(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")$wday
#für einfachere Nutzung wird Sonntag zu 7 gesetzt
rawdata$wkday[rawdata$wkday==0] = 7
#check for weekend (5,6,7)
rawdata$wkend = rawdata$wkday > 4
#nur die Gäste, die tatsächlich gekommen sind
rawdata_showup = rawdata[rawdata$reservation_status== "Check-Out",]
#bei Unteschied gleich null trotzdem auf 1 setzen, da Zimmer auch ohne Übernachtung bis zum nächsten Tag belegt ist?
rawdata_showup$stay_totaldays=as.numeric(as.Date(rawdata_showup$reservation_status_date)-rawdata_showup$checkin_date)
#komische hohe Werte!
unique(rawdata_showup$stay_totaldays)
#check for correctness of Weekend/weekday entries
for(i in (1:length(rawdata_showup$stay_totaldays))){
wkendcntr=0
wkdaycntr=0
checkin_wkday = rawdata_showup$wkday[i]
total = rawdata_showup$stay_totaldays[i]
cmpltweeks = floor((checkin_wkday+total)/7)
rest = (checkin_wkday+total) %% 7
wkendcntr= cmpltweeks*2
if(rest == 6){
wkendcntr= wkendcntr+1
}
rawdata_showup$stays_in_week_nights_corr[i] = total-wkendcntr
rawdata_showup$stays_in_weekend_nights_corr[i] = wkendcntr
}
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
knitr::opts_chunk$set(echo = TRUE)
library("GGally")
library("knitr")
knitr::opts_chunk$set(echo = TRUE)
# Laden des GGally Packages
library("GGally")
library("knitr")
knitr::opts_chunk$set(echo = TRUE)
# Laden des GGally Packages
library("GGally")
library("knitr")
AggregateIFR2 <- AggregateIFR2[order(AggregateIFR2$Group.1,decreasing=FALSE),]
AggregateIFR2
AggregateIFR2 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults,clndatacity$children,clndatacity$meal), median)
AggregateIFR2
AggregateIFR2 <- AggregateIFR2[order(AggregateIFR2$Group.1,decreasing=FALSE),]
colnames(AggregateIFR) = c("Room_Type","adults","children","meal","adr")
AggregateIFR2
AggregateIFR2 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults,clndatacity$children,clndatacity$meal), median)
AggregateIFR2
AggregateIFR2 <- AggregateIFR2[order(AggregateIFR2$Group.1,decreasing=FALSE),]
colnames(AggregateIFR2) = c("Room_Type","adults","children","meal","adr")
AggregateIFR2 <- subset(AggregateIFR2, !meal
== "Undefined")
AggregateIFR2 <- subset(AggregateIFR2, !adults == "0")
AggregateIFR2 <- subset(AggregateIFR2, !adr == "0")
kable(AggregateIFR2, caption = "AggregateOTDShangh")
AggregateIFR2
AggregateIFR2 %>% count(adults)
require(dplyr)
AggregateIFR2 %>% count(adults)
AggregateIFR2 %>% count(adults,adults)
AggregateIFR2 %>% count(adults,children)
AggregateIFR2 %>% count(reserved_room_type,adults,children,meal)
AggregateIFR2 %>% count(adults,children,meal)
AggregateIFR2 %>% count(reserved_room_type,adults,children,meal)
clndatacity %>% count(Room_Type,adults,children,meal)
clndatacity %>% count(reserved_room_type,adults,children,meal)
clndatacity <- subset(clndatacity, !meal
== "Undefined")
clndatacity <- subset(clndatacity, !adults == "0")
clndatacity <- subset(clndatacity, !adr == "0")
require(dplyr)
clndatacity %>% count(reserved_room_type,adults,children,meal)
AggregateIFR2
AggregateIFR2 <- subset(AggregateIFR2, !meal
== "Undefined")
AggregateIFR2 <- subset(AggregateIFR2, !adults == "0")
AggregateIFR2 <- subset(AggregateIFR2, !adr == "0")
AggregateIFR2
clndatacity <- subset(clndatacity, !meal
== "Undefined")
clndatacity <- subset(clndatacity, !adults == "0")
clndatacity <- subset(clndatacity, !adr == "0")
require(dplyr)
clndatacity %>% count(reserved_room_type,adults,children,meal)
