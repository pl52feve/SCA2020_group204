deposit = aggregate(is_canceled ~ deposit_type,data=clndata, mean)
deposit
customer_type = aggregate(is_canceled ~ customer_type,data=clndata, mean)
customer_type
previous_bookings_not_canceled = aggregate(is_canceled ~ previous_bookings_not_canceled,data=clndata, mean)
previous_bookings_not_canceled
is_repeated_guest = aggregate(is_canceled ~ is_repeated_guest,data=clndata, mean)
is_repeated_guest
distribution_channel = aggregate(is_canceled ~ distribution_channel,data=clndata, mean)
distribution_channel
market_segment = aggregate(is_canceled ~ market_segment,data=clndata, mean)
market_segment
meal = aggregate(is_canceled ~ meal,data=clndata, mean)
meal
country = aggregate(is_canceled ~ country,data=clndata, mean)
country
country <- country[order(country$is_canceled,decreasing=T),]
head(country[c("country","is_canceled")],5)
arrival_date_year = aggregate(is_canceled ~ arrival_date_year,data=clndata, mean)
arrival_date_year
arrival_date_month = aggregate(is_canceled ~ arrival_date_month,data=clndata, mean)
arrival_date_month
hotel = aggregate(is_canceled ~ hotel,data=clndata, mean)
hotel
'
clndatacityadr = subset(clndatacity, !meal
== "Undefined")
clndatacityadr <- subset(clndatacityadr, !adults == "0")
clndatacityadr <- subset(clndatacityadr, !adr == "0")
require(dplyr)
count_room_types = clndatacityadr %>% count(reserved_room_type,adults,children,meal)
aggregateadr = aggregate(clndatacityadr$adr, list(clndatacityadr$reserved_room_type,clndatacityadr$adults,clndatacityadr$children,clndatacityadr$meal), median)
aggregateadr
aggregateadr <- aggregateadr[order(aggregateadr$Group.1,decreasing=FALSE),]
colnames(aggregateadr) = c("Room_Type","adults","children","meal","adr")
overview_room_types = merge(aggregateadr, count_room_types, by.x=c("Room_Type","adults","children","meal"), by.y = c("reserved_room_type","adults","children","meal"))
kable(overview_room_types, caption = "overview_room_types")
# Anzahl einfügen
#testst
#was ist mit Typ undefined?
unique(rawdata$market_segment)
unique(rawdata$meal)
unique(rawdata$distribution_channel)
unique(rawdata$country) #hier heißts NULL
#andere Anzahl belegter Raumtypen als reservierte?
unique(rawdata$reserved_room_type)
unique(rawdata$assigned_room_type)
#Kinder oder Babies ohne Erwachsenen da?
rawdata[rawdata$adults == 0 & (rawdata$children != 0 | rawdata$babies !=0),]
Sys.setlocale("LC_ALL","English")
rawdata$checkin_date = as.Date(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")
#0–6 day of the week, starting on Sunday.
rawdata$wkday=as.POSIXlt(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")$wday
#check for weekend (0,5,6)
rawdata$wkend = rawdata$wkday > 4|rawdata$wkday == 0
#nur die Gäste, die tatsächlich gekommen sind
rawdata_showup = rawdata[rawdata$reservation_status== "Check-Out",]
rawdata_showup$stay_totaldays=as.numeric(as.Date(rawdata_showup$reservation_status_date)-rawdata_showup$checkin_date)
#komische hohe Werte!
unique(rawdata_showup$stay_totaldays)
#check for correctness of Weekend/weekday entries
for(i in (1:length(rawdata_showup$stay_totaldays))){
wkendcntr=0
wkdaycntr=0
datum = rawdata_showup$wkdaymod[i]
total = rawdata_showup$stay_totaldays[i]
cmpltweeks = floor((datum+total)/7)
rest = (datum+total) %% 7
wkendcntr= cmpltweeks*2
if(rest == 6){
wkendcntr= wkendcntr+1
}
rawdata_showup$stays_in_week_nights_corr[i] = total-wkendcntr
rawdata_showup$stays_in_weekend_nights_corr[i] = wkendcntr
}
rawdata = read.csv("data_sss.csv")
clndata=rawdata
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
clndatacity = subset(clndata, hotel== "Resort Hotel")
clndataresort = subset(clndata, hotel== "City Hotel")
#Kapazitäten der beiden Hotels speichern
capLis = data.frame(Zimmer = 403,
Parkpl = 20,
Sitzpl = 200,
Babysitzpl = 20)
capAlga = data.frame(Zimmer = 318,
Parkpl = 50,
Sitzpl = 800,
Babysitzpl = 10)
knitr::opts_chunk$set(echo = TRUE)
# Laden des GGally Packages
library("GGally")
library("knitr")
rawdata = read.csv("data_sss.csv")
clndata=rawdata
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
clndatacity = subset(clndata, hotel== "Resort Hotel")
clndataresort = subset(clndata, hotel== "City Hotel")
#Kapazitäten der beiden Hotels speichern
capLis = data.frame(Zimmer = 403,
Parkpl = 20,
Sitzpl = 200,
Babysitzpl = 20)
capAlga = data.frame(Zimmer = 318,
Parkpl = 50,
Sitzpl = 800,
Babysitzpl = 10)
'
adr_roomtype = aggregate(adr ~ reserved_room_type,data=clndata, mean)
adr_roomtype
adr_assigned_roomtype = aggregate(adr ~ assigned_room_type,data=clndata, mean)
adr_assigned_roomtype
agent = aggregate(is_canceled ~ agent,data=clndata, mean)
agent
company = aggregate(is_canceled ~ company,data=clndata, mean)
company
deposit = aggregate(is_canceled ~ deposit_type,data=clndata, mean)
deposit
customer_type = aggregate(is_canceled ~ customer_type,data=clndata, mean)
customer_type
previous_bookings_not_canceled = aggregate(is_canceled ~ previous_bookings_not_canceled,data=clndata, mean)
previous_bookings_not_canceled
is_repeated_guest = aggregate(is_canceled ~ is_repeated_guest,data=clndata, mean)
is_repeated_guest
distribution_channel = aggregate(is_canceled ~ distribution_channel,data=clndata, mean)
distribution_channel
market_segment = aggregate(is_canceled ~ market_segment,data=clndata, mean)
market_segment
meal = aggregate(is_canceled ~ meal,data=clndata, mean)
meal
country = aggregate(is_canceled ~ country,data=clndata, mean)
country
country <- country[order(country$is_canceled,decreasing=T),]
head(country[c("country","is_canceled")],5)
arrival_date_year = aggregate(is_canceled ~ arrival_date_year,data=clndata, mean)
arrival_date_year
arrival_date_month = aggregate(is_canceled ~ arrival_date_month,data=clndata, mean)
arrival_date_month
hotel = aggregate(is_canceled ~ hotel,data=clndata, mean)
hotel
'
clndatacityadr = subset(clndatacity, !meal
== "Undefined")
clndatacityadr <- subset(clndatacityadr, !adults == "0")
clndatacityadr <- subset(clndatacityadr, !adr == "0")
require(dplyr)
count_room_types = clndatacityadr %>% count(reserved_room_type,adults,children,meal)
aggregateadr = aggregate(clndatacityadr$adr, list(clndatacityadr$reserved_room_type,clndatacityadr$adults,clndatacityadr$children,clndatacityadr$meal), median)
aggregateadr
aggregateadr <- aggregateadr[order(aggregateadr$Group.1,decreasing=FALSE),]
colnames(aggregateadr) = c("Room_Type","adults","children","meal","adr")
overview_room_types = merge(aggregateadr, count_room_types, by.x=c("Room_Type","adults","children","meal"), by.y = c("reserved_room_type","adults","children","meal"))
kable(overview_room_types, caption = "overview_room_types")
# Anzahl einfügen
#testst
#was ist mit Typ undefined?
unique(rawdata$market_segment)
unique(rawdata$meal)
unique(rawdata$distribution_channel)
unique(rawdata$country) #hier heißts NULL
#andere Anzahl belegter Raumtypen als reservierte?
unique(rawdata$reserved_room_type)
unique(rawdata$assigned_room_type)
#Kinder oder Babies ohne Erwachsenen da?
rawdata[rawdata$adults == 0 & (rawdata$children != 0 | rawdata$babies !=0),]
Sys.setlocale("LC_ALL","English")
rawdata$checkin_date = as.Date(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")
#0–6 day of the week, starting on Sunday.
rawdata$wkday=as.POSIXlt(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")$wday
#check for weekend (0,5,6)
rawdata$wkend = rawdata$wkday > 4|rawdata$wkday == 0
#nur die Gäste, die tatsächlich gekommen sind
rawdata_showup = rawdata[rawdata$reservation_status== "Check-Out",]
rawdata_showup$stay_totaldays=as.numeric(as.Date(rawdata_showup$reservation_status_date)-rawdata_showup$checkin_date)
#komische hohe Werte!
unique(rawdata_showup$stay_totaldays)
#check for correctness of Weekend/weekday entries
for(i in (1:length(rawdata_showup$stay_totaldays))){
wkendcntr=0
wkdaycntr=0
datum = rawdata_showup$wkdaymod[i]
total = rawdata_showup$stay_totaldays[i]
cmpltweeks = floor((datum+total)/7)
rest = (datum+total) %% 7
wkendcntr= cmpltweeks*2
if(rest == 6){
wkendcntr= wkendcntr+1
}
rawdata_showup$stays_in_week_nights_corr[i] = total-wkendcntr
rawdata_showup$stays_in_weekend_nights_corr[i] = wkendcntr
}
count_room_types
clndatacityadr
rawdata = read.csv("data_sss.csv")
clndata=rawdata
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
#str(rawdata)
cat("\n\nZusammenfassung:\n\n")
#summary(rawdata)
clndatacity = subset(clndata, hotel== "City Hotel")
clndataresort = subset(clndata, hotel== "Resort Hotel")
#Kapazitäten der beiden Hotels speichern
capLis = data.frame(Zimmer = 403,
Parkpl = 20,
Sitzpl = 200,
Babysitzpl = 20)
capAlga = data.frame(Zimmer = 318,
Parkpl = 50,
Sitzpl = 800,
Babysitzpl = 10)
clndatacityadr = subset(clndatacity, !meal
== "Undefined")
clndatacityadr <- subset(clndatacityadr, !adults == "0")
clndatacityadr <- subset(clndatacityadr, !adr == "0")
require(dplyr)
count_room_types = clndatacityadr %>% count(reserved_room_type,adults,children,meal)
aggregateadr = aggregate(clndatacityadr$adr, list(clndatacityadr$reserved_room_type,clndatacityadr$adults,clndatacityadr$children,clndatacityadr$meal), median)
aggregateadr <- aggregateadr[order(aggregateadr$Group.1,decreasing=FALSE),]
colnames(aggregateadr) = c("Room_Type","adults","children","meal","adr")
overview_room_types = merge(aggregateadr, count_room_types, by.x=c("Room_Type","adults","children","meal"), by.y = c("reserved_room_type","adults","children","meal"))
kable(overview_room_types, caption = "overview_room_types")
clndatacity
clndatacityadr
clndatacityadr = subset(clndatacity, !meal
== "Undefined")
clndatacityadr <- subset(clndatacityadr, !adults == "0")
clndatacityadr <- subset(clndatacityadr, !adr == "0")
clndatacityadr
knitr::opts_chunk$set(echo = TRUE)
# Laden des GGally Packages
library("GGally")
library("knitr")
rawdata = read.csv("data_sss.csv")
clndata=rawdata
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
#str(rawdata)
cat("\n\nZusammenfassung:\n\n")
#summary(rawdata)
clndatacity = subset(clndata, hotel== "City Hotel")
clndataresort = subset(clndata, hotel== "Resort Hotel")
#Kapazitäten der beiden Hotels speichern
capLis = data.frame(Zimmer = 403,
Parkpl = 20,
Sitzpl = 200,
Babysitzpl = 20)
capAlga = data.frame(Zimmer = 318,
Parkpl = 50,
Sitzpl = 800,
Babysitzpl = 10)
'
adr_roomtype = aggregate(adr ~ reserved_room_type,data=clndata, mean)
adr_roomtype
adr_assigned_roomtype = aggregate(adr ~ assigned_room_type,data=clndata, mean)
adr_assigned_roomtype
agent = aggregate(is_canceled ~ agent,data=clndata, mean)
agent
company = aggregate(is_canceled ~ company,data=clndata, mean)
company
deposit = aggregate(is_canceled ~ deposit_type,data=clndata, mean)
deposit
customer_type = aggregate(is_canceled ~ customer_type,data=clndata, mean)
customer_type
previous_bookings_not_canceled = aggregate(is_canceled ~ previous_bookings_not_canceled,data=clndata, mean)
previous_bookings_not_canceled
is_repeated_guest = aggregate(is_canceled ~ is_repeated_guest,data=clndata, mean)
is_repeated_guest
distribution_channel = aggregate(is_canceled ~ distribution_channel,data=clndata, mean)
distribution_channel
market_segment = aggregate(is_canceled ~ market_segment,data=clndata, mean)
market_segment
meal = aggregate(is_canceled ~ meal,data=clndata, mean)
meal
country = aggregate(is_canceled ~ country,data=clndata, mean)
country
country <- country[order(country$is_canceled,decreasing=T),]
head(country[c("country","is_canceled")],5)
arrival_date_year = aggregate(is_canceled ~ arrival_date_year,data=clndata, mean)
arrival_date_year
arrival_date_month = aggregate(is_canceled ~ arrival_date_month,data=clndata, mean)
arrival_date_month
hotel = aggregate(is_canceled ~ hotel,data=clndata, mean)
hotel
'
clndatacityadr = subset(clndatacity, !meal
== "Undefined")
clndatacityadr <- subset(clndatacityadr, !adults == "0")
clndatacityadr <- subset(clndatacityadr, !adr == "0")
require(dplyr)
count_room_types = clndatacityadr %>% count(reserved_room_type,adults,children,meal)
aggregateadr = aggregate(clndatacityadr$adr, list(clndatacityadr$reserved_room_type,clndatacityadr$adults,clndatacityadr$children,clndatacityadr$meal), median)
aggregateadr <- aggregateadr[order(aggregateadr$Group.1,decreasing=FALSE),]
colnames(aggregateadr) = c("Room_Type","adults","children","meal","adr")
overview_room_types = merge(aggregateadr, count_room_types, by.x=c("Room_Type","adults","children","meal"), by.y = c("reserved_room_type","adults","children","meal"))
kable(overview_room_types, caption = "overview_room_types")
# Anzahl einfügen
'
#testst
#was ist mit Typ undefined?
unique(rawdata$market_segment)
unique(rawdata$meal)
unique(rawdata$distribution_channel)
unique(rawdata$country) #hier heißts NULL
#andere Anzahl belegter Raumtypen als reservierte?
unique(rawdata$reserved_room_type)
unique(rawdata$assigned_room_type)
#Kinder oder Babies ohne Erwachsenen da?
rawdata[rawdata$adults == 0 & (rawdata$children != 0 | rawdata$babies !=0),]
Sys.setlocale("LC_ALL","English")
rawdata$checkin_date = as.Date(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")
#0–6 day of the week, starting on Sunday.
rawdata$wkday=as.POSIXlt(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")$wday
#check for weekend (0,5,6)
rawdata$wkend = rawdata$wkday > 4|rawdata$wkday == 0
#nur die Gäste, die tatsächlich gekommen sind
rawdata_showup = rawdata[rawdata$reservation_status== "Check-Out",]
rawdata_showup$stay_totaldays=as.numeric(as.Date(rawdata_showup$reservation_status_date)-rawdata_showup$checkin_date)
#komische hohe Werte!
unique(rawdata_showup$stay_totaldays)
#check for correctness of Weekend/weekday entries
for(i in (1:length(rawdata_showup$stay_totaldays))){
wkendcntr=0
wkdaycntr=0
datum = rawdata_showup$wkdaymod[i]
total = rawdata_showup$stay_totaldays[i]
cmpltweeks = floor((datum+total)/7)
rest = (datum+total) %% 7
wkendcntr= cmpltweeks*2
if(rest == 6){
wkendcntr= wkendcntr+1
}
rawdata_showup$stays_in_week_nights_corr[i] = total-wkendcntr
rawdata_showup$stays_in_weekend_nights_corr[i] = wkendcntr
}
#hallotest
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
'
knitr::opts_chunk$set(echo = TRUE)
# Laden des GGally Packages
library("GGally")
library("knitr")
rawdata = read.csv("data_sss.csv")
clndata=rawdata
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
#str(rawdata)
cat("\n\nZusammenfassung:\n\n")
#summary(rawdata)
clndatacity = subset(clndata, hotel== "City Hotel")
clndataresort = subset(clndata, hotel== "Resort Hotel")
#Kapazitäten der beiden Hotels speichern
capLis = data.frame(Zimmer = 403,
Parkpl = 20,
Sitzpl = 200,
Babysitzpl = 20)
capAlga = data.frame(Zimmer = 318,
Parkpl = 50,
Sitzpl = 800,
Babysitzpl = 10)
'
adr_roomtype = aggregate(adr ~ reserved_room_type,data=clndata, mean)
adr_roomtype
adr_assigned_roomtype = aggregate(adr ~ assigned_room_type,data=clndata, mean)
adr_assigned_roomtype
agent = aggregate(is_canceled ~ agent,data=clndata, mean)
agent
company = aggregate(is_canceled ~ company,data=clndata, mean)
company
deposit = aggregate(is_canceled ~ deposit_type,data=clndata, mean)
deposit
customer_type = aggregate(is_canceled ~ customer_type,data=clndata, mean)
customer_type
previous_bookings_not_canceled = aggregate(is_canceled ~ previous_bookings_not_canceled,data=clndata, mean)
previous_bookings_not_canceled
is_repeated_guest = aggregate(is_canceled ~ is_repeated_guest,data=clndata, mean)
is_repeated_guest
distribution_channel = aggregate(is_canceled ~ distribution_channel,data=clndata, mean)
distribution_channel
market_segment = aggregate(is_canceled ~ market_segment,data=clndata, mean)
market_segment
meal = aggregate(is_canceled ~ meal,data=clndata, mean)
meal
country = aggregate(is_canceled ~ country,data=clndata, mean)
country
country <- country[order(country$is_canceled,decreasing=T),]
head(country[c("country","is_canceled")],5)
arrival_date_year = aggregate(is_canceled ~ arrival_date_year,data=clndata, mean)
arrival_date_year
arrival_date_month = aggregate(is_canceled ~ arrival_date_month,data=clndata, mean)
arrival_date_month
hotel = aggregate(is_canceled ~ hotel,data=clndata, mean)
hotel
'
clndatacityadr = subset(clndatacity, !meal
== "Undefined")
clndatacityadr <- subset(clndatacityadr, !adults == "0")
clndatacityadr <- subset(clndatacityadr, !adr == "0")
require(dplyr)
count_room_types = clndatacityadr %>% count(reserved_room_type,adults,children,meal)
aggregateadr = aggregate(clndatacityadr$adr, list(clndatacityadr$reserved_room_type,clndatacityadr$adults,clndatacityadr$children,clndatacityadr$meal), median)
aggregateadr <- aggregateadr[order(aggregateadr$Group.1,decreasing=FALSE),]
colnames(aggregateadr) = c("Room_Type","adults","children","meal","adr")
overview_room_types = merge(aggregateadr, count_room_types, by.x=c("Room_Type","adults","children","meal"), by.y = c("reserved_room_type","adults","children","meal"))
kable(overview_room_types, caption = "overview_room_types")
# Anzahl einfügen
'
#testst
#was ist mit Typ undefined?
unique(rawdata$market_segment)
unique(rawdata$meal)
unique(rawdata$distribution_channel)
unique(rawdata$country) #hier heißts NULL
#andere Anzahl belegter Raumtypen als reservierte?
unique(rawdata$reserved_room_type)
unique(rawdata$assigned_room_type)
#Kinder oder Babies ohne Erwachsenen da?
rawdata[rawdata$adults == 0 & (rawdata$children != 0 | rawdata$babies !=0),]
Sys.setlocale("LC_ALL","English")
rawdata$checkin_date = as.Date(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")
#0–6 day of the week, starting on Sunday.
rawdata$wkday=as.POSIXlt(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")$wday
#check for weekend (0,5,6)
rawdata$wkend = rawdata$wkday > 4|rawdata$wkday == 0
#nur die Gäste, die tatsächlich gekommen sind
rawdata_showup = rawdata[rawdata$reservation_status== "Check-Out",]
rawdata_showup$stay_totaldays=as.numeric(as.Date(rawdata_showup$reservation_status_date)-rawdata_showup$checkin_date)
#komische hohe Werte!
unique(rawdata_showup$stay_totaldays)
#check for correctness of Weekend/weekday entries
for(i in (1:length(rawdata_showup$stay_totaldays))){
wkendcntr=0
wkdaycntr=0
datum = rawdata_showup$wkdaymod[i]
total = rawdata_showup$stay_totaldays[i]
cmpltweeks = floor((datum+total)/7)
rest = (datum+total) %% 7
wkendcntr= cmpltweeks*2
if(rest == 6){
wkendcntr= wkendcntr+1
}
rawdata_showup$stays_in_week_nights_corr[i] = total-wkendcntr
rawdata_showup$stays_in_weekend_nights_corr[i] = wkendcntr
}
#hallotest
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
'
overview_room_types
clndataresortadr = subset(clndataresort, !meal
== "Undefined")
clndataresortadr <- subset(clndataresortadr, !adults == "0")
clndataresortadr <- subset(clndataresortadr, !adr == "0")
require(dplyr)
count_room_types = clndataresortadr %>% count(reserved_room_type,adults,children,meal)
aggregateadr = aggregate(clndataresortadr$adr, list(clndataresortadr$reserved_room_type,clndataresortadr$adults,clndataresortadr$children,clndataresortadr$meal), median)
aggregateadr <- aggregateadr[order(aggregateadr$Group.1,decreasing=FALSE),]
colnames(aggregateadr) = c("Room_Type","adults","children","meal","adr")
overview_room_types = merge(aggregateadr, count_room_types, by.x=c("Room_Type","adults","children","meal"), by.y = c("reserved_room_type","adults","children","meal"))
kable(overview_room_types_resort, caption = "overview_room_types")
clndataresortadr = subset(clndataresort, !meal
== "Undefined")
clndataresortadr <- subset(clndataresortadr, !adults == "0")
clndataresortadr <- subset(clndataresortadr, !adr == "0")
require(dplyr)
count_room_types = clndataresortadr %>% count(reserved_room_type,adults,children,meal)
aggregateadr = aggregate(clndataresortadr$adr, list(clndataresortadr$reserved_room_type,clndataresortadr$adults,clndataresortadr$children,clndataresortadr$meal), median)
aggregateadr <- aggregateadr[order(aggregateadr$Group.1,decreasing=FALSE),]
colnames(aggregateadr) = c("Room_Type","adults","children","meal","adr")
overview_room_types_resort = merge(aggregateadr, count_room_types, by.x=c("Room_Type","adults","children","meal"), by.y = c("reserved_room_type","adults","children","meal"))
kable(overview_room_types_resort, caption = "overview_room_types_resort")
overview_room_types_resort
clndata
clndata$arrival_date_month <- sprintf("%02d",clndata$arrival_date_month)
clndata <- tidyr::unite(clndata, Period, "arrival_date_year","arrival_date_month", sep ="", remove= FALSE)
clndata
clndata <- tidyr::unite(clndata, Period, "arrival_date_month","arrival_date_year", sep ="", remove= FALSE)
clndata
clndata <- tidyr::unite(clndata, Period, "arrival_date_month","arrival_date_year", sep =".", remove= FALSE)
ProfitCalculationYear= aggregate(adr ~ Period, data=clndata,sum)
ProfitCalculationYear
clndata$arrival_date_month <- sprintf("%02d",clndata$arrival_date_month)
# Spalte Periode in service erstellen
clndata <- tidyr::unite(clndata, Period, "arrival_date_month","arrival_date_year", sep =".", remove= FALSE)
Periodadrall= aggregate(adr ~ Period, data=clndata,sum)
# Spalte Periode in service erstellen
clndata <- tidyr::unite(clndata, Period, "arrival_date_month","arrival_date_year", sep =".", remove= FALSE)
Period_adr_all= aggregate(adr ~ Period, data=clndata,sum)
Period_adr_all
as.Date(Period_adr_all$Period)
clndata <- tidyr::unite(clndata, Period, "arrival_date_month","arrival_date_year", sep ="", remove= FALSE)
Period_adr_all= aggregate(adr ~ Period, data=clndata,sum)
as.Date(Period_adr_all$Period)
charToDate(Period_adr_all$Period)
install.packages("date")
