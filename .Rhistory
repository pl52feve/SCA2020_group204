for(i in (1:length(rawdata_showup_Lis$stay_totaldays))){
idx = which(Auslastung$Datum == rawdata_showup_Lis$checkin_date[i])
switch(rawdata_showup_resort$assigned_room_type[i],
"A" = {Auslastung$A[idx] = Auslastung$A[idx]+1},
"B" = {Auslastung$B[idx] = Auslastung$B[idx]+1},
"C" = {Auslastung$C[idx] = Auslastung$C[idx]+1},
"D" = {Auslastung$D[idx] = Auslastung$D[idx]+1},
"E" = {Auslastung$E[idx] = Auslastung$E[idx]+1},
"F" = {Auslastung$F[idx] = Auslastung$F[idx]+1},
"G" = {Auslastung$G[idx] = Auslastung$G[idx]+1},
"H" = {Auslastung$H[idx] = Auslastung$H[idx]+1},
"I" = {Auslastung$I[idx] = Auslastung$I[idx]+1},
"K" = {Auslastung$K[idx] = Auslastung$K[idx]+1}
)
for (j in idx:(idx+rawdata_showup_Lis$stay_totaldays[i]-1)){
Auslastung$ZimAuslLis[j] = Auslastung$ZimAuslLis[j]+1;
}
}
#beide mega schllecht ausgelastet! Stimmt so?
summary(Auslastung$ZimAuslLis)
summary(Auslastung$ZimAusResort)
View(Auslastung)
View(Auslastung)
knitr::opts_chunk$set(echo = TRUE)
# Laden des GGally Packages
library("GGally")
library("knitr")
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
Sys.setlocale("LC_ALL","English")
rawdata$checkin_date = as.Date(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")
rawdata$Period <- format(as.Date(rawdata$checkin_date), "%Y-%m")
#0–6 day of the week, starting on Sunday.
rawdata$wkday=as.POSIXlt(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")$wday
#für einfachere Nutzung wird Sonntag zu 7 gesetzt
rawdata$wkday[rawdata$wkday==0] = 7
#check for weekend (5,6,7)
rawdata$wkend = rawdata$wkday > 4
#Kapazitäten der beiden Hotels speichern
capLis = data.frame(Zimmer = 403,
Parkpl = 20,
Sitzpl = 200,
Babysitzpl = 20)
capAlga = data.frame(Zimmer = 318,
Parkpl = 50,
Sitzpl = 800,
Babysitzpl = 10)
#Datenbereinigung
clndata = rawdata
clndata$is_repeated_guest <- stringr::str_replace_all(clndata$is_repeated_guest,pattern="no",repl="0")
clndata$is_repeated_guest <- as.integer(clndata$is_repeated_guest)
clndata$stays_in_nights = clndata$stays_in_week_nights + clndata$stays_in_weekend_nights
#was ist mit Typ undefined?
unique(rawdata$market_segment)
unique(rawdata$meal)
unique(rawdata$distribution_channel)
unique(rawdata$country) #hier heißts NULL
#andere Anzahl belegter Raumtypen als reservierte?
unique(rawdata$reserved_room_type)
unique(rawdata$assigned_room_type)
#Buchungen löschen, die keine Anzahl an Tagen haben - geht so nicht
#clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
#Kinder oder Babies ohne Erwachsenen da?
clndata = clndata[!(clndata$adults == 0 & (clndata$children != 0 | clndata$babies !=0)),]
clndatacity = subset(clndata, hotel== "Resort Hotel")
clndataresort = subset(clndata, hotel== "City Hotel")
#aggregate Funktionen
adr_roomtype = aggregate(adr ~ reserved_room_type,data=clndata, mean)
adr_roomtype
adr_assigned_roomtype = aggregate(adr ~ assigned_room_type,data=clndata, mean)
adr_assigned_roomtype
agent = aggregate(is_canceled ~ agent,data=clndata, mean)
agent
company = aggregate(is_canceled ~ company,data=clndata, mean)
company
deposit = aggregate(is_canceled ~ deposit_type,data=clndata, mean)
deposit
customer_type = aggregate(is_canceled ~ customer_type,data=clndata, mean)
customer_type
previous_bookings_not_canceled = aggregate(is_canceled ~ previous_bookings_not_canceled,data=clndata, mean)
previous_bookings_not_canceled
is_repeated_guest =aggregate(is_canceled ~ is_repeated_guest,data=clndata, mean)
is_repeated_guest
distribution_channel = aggregate(is_canceled ~ distribution_channel,data=clndata, mean)
distribution_channel
market_segment = aggregate(is_canceled ~ market_segment,data=clndata, mean)
market_segment
meal = aggregate(is_canceled ~ meal,data=clndata, mean)
meal
country = aggregate(is_canceled ~ country,data=clndata, mean)
country <- country[order(country$is_canceled,decreasing=T),]
head(country[c("country","is_canceled")],5)
arrival_date_year = aggregate(is_canceled ~ arrival_date_year,data=clndata, mean)
arrival_date_year
arrival_date_month = aggregate(is_canceled ~ arrival_date_month,data=clndata, mean)
arrival_date_month
hotel = aggregate(is_canceled ~ hotel,data=clndata, mean)
hotel
AggregateIFR = aggregate(clndata$adr, list(clndata$reserved_room_type,clndata$adults), mean)
AggregateIFR
#median passt sehr gut
AggregateIFR1 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults), median)
AggregateIFR1
AggregateIFR2 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults,clndatacity$children,clndatacity$meal), median)
AggregateIFR2
AggregateIFR2 <- AggregateIFR2[order(AggregateIFR2$Group.1,decreasing=FALSE),]
colnames(AggregateIFR2) = c("Room_Type","adults","children","meal","adr")
AggregateIFR2 <- subset(AggregateIFR2, !meal == "Undefined")
AggregateIFR2 <- subset(AggregateIFR2, !adults == "0")
AggregateIFR2 <- subset(AggregateIFR2, !adr == "0")
##### was ist das hier? ####
kable(AggregateIFR2, caption = "AggregateOTDShangh")
###########################
clndatacity <- subset(clndatacity, !meal== "Undefined")
clndatacity <- subset(clndatacity, !adults == "0")
clndatacity <- subset(clndatacity, !adr == "0")
require(dplyr)
clndatacity %>% count(reserved_room_type,adults,children,meal)
# Anzahl einfügen# room-types Kosten City
clndatacityadr = subset(clndatacity, !meal == "Undefined")
clndatacityadr <- subset(clndatacityadr, !adults == "0")
clndatacityadr <- subset(clndatacityadr, !adr == "0")
require(dplyr)
count_room_types = clndatacityadr %>% count(reserved_room_type,adults,children,meal)
aggregateadr = aggregate(clndatacityadr$adr, list(clndatacityadr$reserved_room_type,clndatacityadr$adults,clndatacityadr$children,clndatacityadr$meal), median)
aggregateadr <- aggregateadr[order(aggregateadr$Group.1,decreasing=FALSE),]
colnames(aggregateadr) = c("Room_Type","adults","children","meal","adr")
overview_room_types_city = merge(aggregateadr, count_room_types, by.x=c("Room_Type","adults","children","meal"), by.y = c("reserved_room_type","adults","children","meal"))
kable(overview_room_types_city, caption = "overview_room_types_city")
clndataresortadr = subset(clndataresort, !meal== "Undefined")
clndataresortadr <- subset(clndataresortadr, !adults == "0")
clndataresortadr <- subset(clndataresortadr, !adr == "0")
require(dplyr)
count_room_types = clndataresortadr %>% count(reserved_room_type,adults,children,meal)
aggregateadr = aggregate(clndataresortadr$adr, list(clndataresortadr$reserved_room_type,clndataresortadr$adults,clndataresortadr$children,clndataresortadr$meal), median)
aggregateadr <- aggregateadr[order(aggregateadr$Group.1,decreasing=FALSE),]
colnames(aggregateadr) = c("Room_Type","adults","children","meal","adr")
overview_room_types_resort = merge(aggregateadr, count_room_types, by.x=c("Room_Type","adults","children","meal"), by.y = c("reserved_room_type","adults","children","meal"))
kable(overview_room_types_resort, caption = "overview_room_types_resort")
#########################
#Zeitreihenanalyse
#Zeitreihenanalyse adr
# alle Daten
Periodadr_overall= aggregate(adr ~ Period, data=clndata,mean)
#clndata_adr_TS  = ts(clndata$adr, frequency = 12)
#M_Shangh = ets(clndata_adr_TS, model = "ZZZ")
### city
Periodadr_city= aggregate(adr ~ Period, data=clndatacity,mean)
#clndatacity_adr_TS = ts(clndatacity$adr, frequency = 12)
###resort
Periodadr_resort= aggregate(adr ~ Period, data=clndataresort,mean)
#clndata_TS = ts(clndataresort$adr, frequency = 12)
ggplot(data = NULL, aes(ymin = 0, ymax = 0, group =1)) +
# Erste Linie hinzufuegen
geom_line(data=Periodadr_overall, aes(x = Period,
# Y-Achse = Kombination von fitting Werten und Forecast Werten
y = adr,
# Beschriftung fuer Farbe festlegen
colour = 'overall')) +
# Zweite Linie hinzufuegen
geom_line(data=Periodadr_city, aes(x = Period,
# Y-Achse = Kombination von fitting Werten und Forecast Werten
y = adr,
# Beschriftung fuer Farbe festlegen
colour = 'city')) +
# dritte Linie hinzufuegen
geom_line(data=Periodadr_resort, aes(x = Period,
# Y-Achse = Kombination von fitting Werten und Forecast Werten
y = adr,
# Beschriftung fuer Farbe festlegen
colour = 'resort')) + ggtitle("Comparison adr") + xlab("Period")+ ylab("adr") +
# Farben fuer Beschriftungen festlegen
scale_colour_manual(breaks = c("overall", "city","resort"), values = c("black", "blue","red"))  + theme(axis.text.x = element_text(size = 7, angle=270, hjust=1))
###
#canceled
#overall
Periodcanceled_overall = aggregate(is_canceled ~ Period, data=clndata,mean)
#clndata_TS  = ts(clndata$is_canceled, frequency = 12)
#city
Periodcanceled_city = aggregate(is_canceled ~ Period, data=clndatacity,mean)
#clndata_TS  = ts(clndatacity$is_canceled, frequency = 12)
#resort
Periodcanceled_resort = aggregate(is_canceled ~ Period, data=clndataresort,mean)
#clndata_TS  = ts(clndataresort$is_canceled, frequency = 12)
ggplot(data = NULL, aes(ymin = 0, ymax = 0, group =1)) +
# Erste Linie hinzufuegen
geom_line(data=Periodcanceled_overall, aes(x = Period,
# Y-Achse = Kombination von fitting Werten und Forecast Werten
y = is_canceled,
# Beschriftung fuer Farbe festlegen
colour = 'overall')) +
# Zweite Linie hinzufuegen
geom_line(data=Periodcanceled_city, aes(x = Period,
# Y-Achse = Kombination von fitting Werten und Forecast Werten
y = is_canceled,
# Beschriftung fuer Farbe festlegen
colour = 'city')) +
# dritte Linie hinzufuegen
geom_line(data=Periodcanceled_resort, aes(x = Period,
# Y-Achse = Kombination von fitting Werten und Forecast Werten
y = is_canceled,
# Beschriftung fuer Farbe festlegen
colour = 'resort')) + ggtitle("Comparison is_canceled") + xlab("Period")+ ylab("is_canceled") +
# Farben fuer Beschriftungen festlegen
scale_colour_manual(breaks = c("overall", "city","resort"), values = c("black", "blue","red"))  + theme(axis.text.x = element_text(size = 7, angle=270, hjust=1))
######
#Correlation
#resort
cor(clndataresort$is_canceled, clndataresort[,c("lead_time","stays_in_nights","adults","children","babies", "previous_cancellations", "previous_bookings_not_canceled", "booking_changes", "days_in_waiting_list", "adr", "required_car_parking_spaces", "total_of_special_requests","is_repeated_guest")])
#
cor(clndataresort$is_canceled, clndataresort[,c("lead_time","stays_in_nights","adults","children","babies", "previous_cancellations", "previous_bookings_not_canceled", "booking_changes", "days_in_waiting_list", "adr", "required_car_parking_spaces", "total_of_special_requests","is_repeated_guest")])
###### Haufigkeitstabellen
meal_types = aggregate(is_canceled ~ meal, clndatacity, sum)
meal_types$amount = table(clndatacity$meal)
meal_types$percentage = meal_types$is_canceled / meal_types$amount
meal_types
meal_types = aggregate(is_canceled ~ meal, clndataresort, sum)
meal_types$amount = table(clndataresort$meal)
meal_types$percentage = meal_types$is_canceled / meal_types$amount
meal_types
customer_type = aggregate(is_canceled ~ customer_type, clndatacity, sum)
customer_type$amount = table(clndatacity$customer_type)
customer_type$percentage = customer_type$is_canceled / customer_type$amount
customer_type
customer_type = aggregate(is_canceled ~ customer_type, clndataresort, sum)
customer_type$amount = table(clndataresort$customer_type)
customer_type$percentage = customer_type$is_canceled / customer_type$amount
customer_type
deposit_type = aggregate(is_canceled ~ deposit_type, clndatacity, sum)
deposit_type$amount = table(clndatacity$deposit_type)
deposit_type$percentage = deposit_type$is_canceled / deposit_type$amount
deposit_type
deposit_type = aggregate(is_canceled ~ deposit_type, clndataresort, sum)
deposit_type$amount = table(clndataresort$deposit_type)
deposit_type$percentage = deposit_type$is_canceled / deposit_type$amount
deposit_type
reserved_room_type = aggregate(is_canceled ~ reserved_room_type, clndatacity, sum)
reserved_room_type$amount = table(clndatacity$reserved_room_type)
reserved_room_type$percentage = reserved_room_type$is_canceled / reserved_room_type$amount
reserved_room_type
reserved_room_type = aggregate(is_canceled ~ reserved_room_type, clndataresort, sum)
reserved_room_type$amount = table(clndataresort$reserved_room_type)
reserved_room_type$percentage = reserved_room_type$is_canceled / reserved_room_type$amount
reserved_room_type
market_segment = aggregate(is_canceled ~ market_segment, clndatacity, sum)
market_segment$amount = table(clndatacity$market_segment)
market_segment$percentage = market_segment$is_canceled / market_segment$amount
market_segment
market_segment = aggregate(is_canceled ~ market_segment, clndataresort, sum)
market_segment$amount = table(clndataresort$market_segment)
market_segment$percentage = market_segment$is_canceled / market_segment$amount
market_segment
distribution_channel = aggregate(is_canceled ~ distribution_channel, clndatacity, sum)
distribution_channel$amount = table(clndatacity$distribution_channel)
distribution_channel$percentage = distribution_channel$is_canceled / distribution_channel$amount
distribution_channel
distribution_channel = aggregate(is_canceled ~ distribution_channel, clndataresort, sum)
distribution_channel$amount = table(clndataresort$distribution_channel)
distribution_channel$percentage = distribution_channel$is_canceled / distribution_channel$amount
distribution_channel
#nur die Gäste, die tatsächlich gekommen sind
clndata_showup = clndata[clndata$reservation_status== "Check-Out",]
clndata_showup$totalNr_guest = clndata_showup$adults +  clndata_showup$children +  clndata_showup$babies;
#bei Unterschied gleich null trotzdem auf 1 setzen, da Zimmer auch ohne Übernachtung bis zum nächsten Tag belegt ist?
clndata_showup$stay_totaldays=as.numeric(as.Date(clndata_showup$reservation_status_date)-clndata_showup$checkin_date)
#check for correctness of Weekend/weekday entries
for(i in (1:length(clndata_showup$stay_totaldays))){
wkendcntr=0
wkdaycntr=0
checkin_wkday = clndata_showup$wkday[i]
total = clndata_showup$stay_totaldays[i]
cmpltweeks = floor((checkin_wkday+total)/7)
rest = (checkin_wkday+total) %% 7
wkendcntr= cmpltweeks*2
if(rest == 6){
wkendcntr= wkendcntr+1
}
clndata_showup$stays_in_week_nights_corr[i] = total-wkendcntr
clndata_showup$stays_in_weekend_nights_corr[i] = wkendcntr
}
Auslastung = data.frame(Datum = seq(as.Date(min(clndata_showup$checkin_date)),
as.Date(max(clndata_showup$reservation_status_date)),
by="days"))
AuslastungResort = data.frame(Datum = seq(as.Date(min(clndata_showup$checkin_date)),
as.Date(max(clndata_showup$reservation_status_date)),
by="days"))
AuslastungLis = data.frame(Datum = seq(as.Date(min(clndata_showup$checkin_date)),
as.Date(max(clndata_showup$reservation_status_date)),
by="days"))
room_types= sort(unique(clndata_showup$assigned_room_type))
############   Auslastung Resort   ###############################
##Spalten setzen für
#Zimmertypen
AuslastungResort$A = 0;
AuslastungResort$B = 0;
AuslastungResort$C = 0;
AuslastungResort$D = 0;
AuslastungResort$E = 0;
AuslastungResort$F = 0;
AuslastungResort$G = 0;
AuslastungResort$H = 0;
AuslastungResort$I = 0;
AuslastungResort$K = 0;
#Essenswahl+ Stühle
AuslastungResort$brkfast= 0;
AuslastungResort$lunch = 0;
AuslastungResort$dinner = 0;
AuslastungResort$chairs = 0;
AuslastungResort$babychairs = 0;
#Auslastung
AuslastungResort$ZimAusl= 0;
AuslastungResort$guestNr= 0;
AuslastungResort$carpark= 0;
#Fluktuation
AuslastungResort$checkins = 0;
AuslastungResort$checkouts = 0;
clndata_showup_resort = clndata_showup[clndata_showup$hotel == "Resort Hotel",]
for(i in (1:length(clndata_showup_resort$stay_totaldays))){
idx = which(AuslastungResort$Datum == clndata_showup_resort$checkin_date[i])
guestNr = clndata_showup_resort$totalNr_guest[i];
babies = clndata_showup_resort$babies[i];
adultChild = guestNr - babies;
for (j in idx:(idx+clndata_showup_resort$stay_totaldays[i])){
#zählen welche Zimmetypen gebucht worden
switch(clndata_showup_resort$assigned_room_type[i],
"A" = {AuslastungResort$A[j] = AuslastungResort$A[j]+1},
"B" = {AuslastungResort$B[j] = AuslastungResort$B[j]+1},
"C" = {AuslastungResort$C[j] = AuslastungResort$C[j]+1},
"D" = {AuslastungResort$D[j] = AuslastungResort$D[j]+1},
"E" = {AuslastungResort$E[j] = AuslastungResort$E[j]+1},
"F" = {AuslastungResort$F[j] = AuslastungResort$F[j]+1},
"G" = {AuslastungResort$G[j] = AuslastungResort$G[j]+1},
"H" = {AuslastungResort$H[j] = AuslastungResort$H[j]+1},
"I" = {AuslastungResort$I[j] = AuslastungResort$I[j]+1},
"K" = {AuslastungResort$K[j] = AuslastungResort$K[j]+1} )
#am ersten Tag kann kein Frühstück eingenommen werden
if (j == idx){
switch(clndata_showup_resort$meal[i],
"BB" = NA,
"HB" = {AuslastungResort$dinner[j] = AuslastungResort$dinner[j]+guestNr
AuslastungResort$chairs[j] = AuslastungResort$chairs[j]+adultChild
AuslastungResort$babychairs[j] = AuslastungResort$babychairs[j]+babies},
"FB" = {AuslastungResort$lunch[j] = AuslastungResort$lunch[j]+guestNr;
AuslastungResort$dinner[j] = AuslastungResort$dinner[j]+guestNr
AuslastungResort$chairs[j] = AuslastungResort$chairs[j]+adultChild
AuslastungResort$babychairs[j] = AuslastungResort$babychairs[j]+babies},
"SC" = NA )
}
#am letzten Tag kann nur noch Frühstück eingenommen werden
else if (j == idx+clndata_showup_resort$stay_totaldays[i] ){
switch(clndata_showup_resort$meal[i],
"BB" = {AuslastungResort$brkfast[j] = AuslastungResort$brkfast[j]+guestNr
AuslastungResort$chairs[j] = AuslastungResort$chairs[j]+adultChild
AuslastungResort$babychairs[j] = AuslastungResort$babychairs[j]+babies},
"HB" = {AuslastungResort$brkfast[j] = AuslastungResort$brkfast[j]+guestNr;
AuslastungResort$chairs[j] = AuslastungResort$chairs[j]+adultChild
AuslastungResort$babychairs[j] = AuslastungResort$babychairs[j]+babies},
"FB" = {AuslastungResort$brkfast[j] = AuslastungResort$brkfast[j]+guestNr;
AuslastungResort$chairs[j] = AuslastungResort$chairs[j]+adultChild
AuslastungResort$babychairs[j] = AuslastungResort$babychairs[j]+babies},
"SC" = NA )
}
else{
#zählen wie viel Essen pro Tag benötigt wurde
switch(clndata_showup_resort$meal[i],
"BB" = {AuslastungResort$brkfast[j] = AuslastungResort$brkfast[j]+guestNr
AuslastungResort$chairs[j] = AuslastungResort$chairs[j]+adultChild
AuslastungResort$babychairs[j] = AuslastungResort$babychairs[j]+babies},
"HB" = {AuslastungResort$brkfast[j] = AuslastungResort$brkfast[j]+guestNr;
AuslastungResort$dinner[j] = AuslastungResort$dinner[j]+guestNr
AuslastungResort$chairs[j] = AuslastungResort$chairs[j]+adultChild
AuslastungResort$babychairs[j] = AuslastungResort$babychairs[j]+babies},
"FB" = {AuslastungResort$brkfast[j] = AuslastungResort$brkfast[j]+guestNr;
AuslastungResort$lunch[j] = AuslastungResort$lunch[j]+guestNr;
AuslastungResort$dinner[j] = AuslastungResort$dinner[j]+guestNr
AuslastungResort$chairs[j] = AuslastungResort$chairs[j]+adultChild
AuslastungResort$babychairs[j] = AuslastungResort$babychairs[j]+babies},
"SC" = NA )
}
AuslastungResort$carpark[j] = AuslastungResort$carpark[j]
+clndata_showup_resort$required_car_parking_spaces[i];
AuslastungResort$guestNr[j] = AuslastungResort$guestNr[j]+guestNr;
AuslastungResort$ZimAusl[j] = AuslastungResort$ZimAusl[j]+1;
}
AuslastungResort$checkins[idx] = AuslastungResort$checkins[idx] +1;
AuslastungResort$checkouts[idx+clndata_showup_resort$stay_totaldays[i]] = AuslastungResort$checkouts[idx+clndata_showup_resort$stay_totaldays[i]] +1;
}
#####################   Auslastung Lissabon   ###############################
##Spalten setzen für
#Zimmertypen
AuslastungLis$A = 0;
AuslastungLis$B = 0;
AuslastungLis$C = 0;
AuslastungLis$D = 0;
AuslastungLis$E = 0;
AuslastungLis$F = 0;
AuslastungLis$G = 0;
AuslastungLis$H = 0;
AuslastungLis$I = 0;
AuslastungLis$K = 0;
#Essenswahl
AuslastungLis$brkfast= 0;
AuslastungLis$lunch = 0;
AuslastungLis$dinner = 0;
AuslastungLis$chairs = 0;
AuslastungLis$babychairs = 0;
#Aulastung
AuslastungLis$ZimAusl= 0;
AuslastungLis$guestNr= 0;
AuslastungLis$carpark= 0;
clndata_showup_Lis = clndata_showup[clndata_showup$hotel == "City Hotel",]
for(i in (1:length(clndata_showup_Lis$stay_totaldays))){
idx = which(AuslastungLis$Datum == clndata_showup_Lis$checkin_date[i])
guestNr = clndata_showup_Lis$totalNr_guest[i];
for (j in idx:(idx+clndata_showup_Lis$stay_totaldays[i]-1)){
#zählen welche Zimmetypen geßbucht worden
switch(clndata_showup_Lis$assigned_room_type[i],
"A" = {AuslastungLis$A[j] = AuslastungLis$A[j]+1},
"B" = {AuslastungLis$B[j] = AuslastungLis$B[j]+1},
"C" = {AuslastungLis$C[j] = AuslastungLis$C[j]+1},
"D" = {AuslastungLis$D[j] = AuslastungLis$D[j]+1},
"E" = {AuslastungLis$E[j] = AuslastungLis$E[j]+1},
"F" = {AuslastungLis$F[j] = AuslastungLis$F[j]+1},
"G" = {AuslastungLis$G[j] = AuslastungLis$G[j]+1},
"H" = {AuslastungLis$H[j] = AuslastungLis$H[j]+1},
"I" = {AuslastungLis$I[j] = AuslastungLis$I[j]+1},
"K" = {AuslastungLis$K[j] = AuslastungLis$K[j]+1}
)
#zählen wie viel Essen pro Tag benötigt wurde
switch(clndata_showup_Lis$meal[i],
"BB" = {AuslastungLis$brkfast[j] = AuslastungLis$brkfast[j]+guestNr
AuslastungLis$chairs[j] = AuslastungLis$chairs[j]+adultChild
AuslastungLis$babychairs[j] = AuslastungLis$babychairs[j]+babies},
"HB" = {AuslastungLis$brkfast[j] = AuslastungLis$brkfast[j]+guestNr;
AuslastungLis$dinner[j] = AuslastungLis$dinner[j]+guestNr
AuslastungLis$chairs[j] = AuslastungLis$chairs[j]+adultChild
AuslastungLis$babychairs[j] = AuslastungLis$babychairs[j]+babies},
"FB" = {AuslastungLis$brkfast[j] = AuslastungLis$brkfast[j]+guestNr;
AuslastungLis$lunch[j] = AuslastungLis$lunch[j]+guestNr;
AuslastungLis$dinner[j] = AuslastungLis$dinner[j]+guestNr
AuslastungLis$chairs[j] = AuslastungLis$chairs[j]+adultChild
AuslastungLis$babychairs[j] = AuslastungLis$babychairs[j]+babies},
"SC" = NA )
}
AuslastungLis$guestNr[j] = AuslastungLis$guestNr[j]+guestNr;
AuslastungLis$ZimAusl[j] = AuslastungLis$ZimAusl[j]+1;
AuslastungLis$carpark[j] = AuslastungLis$carpark[j]+clndata_showup_Lis$required_car_parking_spaces[i];
}
#####################   Gesamt Auslastung   ###############################
Auslastung$ZimAusl = AuslastungLis$ZimAusl + AuslastungResort$ZimAusl;
Auslastung$A = AuslastungLis$A +AuslastungResort$A;
Auslastung$B = AuslastungLis$B +AuslastungResort$B;
Auslastung$C = AuslastungLis$C +AuslastungResort$C;
Auslastung$D = AuslastungLis$D +AuslastungResort$D;
Auslastung$E = AuslastungLis$E +AuslastungResort$E;
Auslastung$F = AuslastungLis$F +AuslastungResort$F;
Auslastung$G = AuslastungLis$G +AuslastungResort$G;
Auslastung$H = AuslastungLis$H +AuslastungResort$H;
Auslastung$I = AuslastungLis$I +AuslastungResort$I;
Auslastung$K = AuslastungLis$K +AuslastungResort$K;
Auslastung$brkfast = AuslastungLis$brkfast +AuslastungResort$brkfast;
Auslastung$lunch = AuslastungLis$lunch +AuslastungResort$lunch;
Auslastung$dinner = AuslastungLis$dinner +AuslastungResort$dinner;
Auslastung$chairs = AuslastungLis$chairs +AuslastungResort$chairs;
Auslastung$babychairs = AuslastungLis$babychairs +AuslastungResort$babychairs;
Auslastung$guestNr = AuslastungLis$guestNr +AuslastungResort$guestNr;
Auslastung$carpark = AuslastungLis$carpark +AuslastungResort$carpark
ggplot(data = NULL, aes(ymin = 0, ymax = 0, group =1)) +
# Erste Linie hinzufuegen
geom_line(data=Auslastung, aes(x = Datum,
y = ZimAusl,
colour = 'overall')) +
# Zweite Linie hinzufuegen
geom_line(data=AuslastungLis, aes(x = Datum,
y = ZimAusl,
colour = 'city')) +
# dritte Linie hinzufuegen
geom_line(data=AuslastungResort, aes(x = Datum,
y = ZimAusl,
colour = 'resort')) + ggtitle("Comparison Zimmer Auslastung") + xlab("Datum")+ ylab("Zimmer Auslastung") +
# Farben fuer Beschriftungen festlegen
scale_colour_manual(breaks = c("overall", "city","resort"), values = c("black", "blue","red"))  + theme(axis.text.x = element_text(size = 7, angle=270, hjust=1))
ggplot(data = NULL, aes(ymin = 0, ymax = 0, group =1)) +
# Erste Linie hinzufuegen
geom_line(data=Auslastung, aes(x = Datum,
y = carpark,
colour = 'overall')) +
# Zweite Linie hinzufuegen
geom_line(data=AuslastungLis, aes(x = Datum,
y = carpark,
colour = 'city')) +
# dritte Linie hinzufuegen
geom_line(data=AuslastungResort, aes(x = Datum,
y = carpark,
colour = 'resort')) + ggtitle("Comparison Zimmer Auslastung") + xlab("Datum")+ ylab("Zimmer Auslastung") +
# Farben fuer Beschriftungen festlegen
scale_colour_manual(breaks = c("overall", "city","resort"), values = c("black", "blue","red"))  + theme(axis.text.x = element_text(size = 7, angle=270, hjust=1))
clndata_noshow = clndata[clndata$reservation_status== "No-Show",]
clndata_storno = clndata[clndata$reservation_status == "Canceled",]
clndata_storno$storno_Vorlauf = as.numeric(clndata_storno$checkin_date - as.Date(clndata_storno$reservation_status_date))
#Verluste für Material+Personal
#pro Bchung gerechnet
gesamtVerlust_MatPers = dim(clndata_noshow)[1] + sum(clndata_storno$storno_Vorlauf <= 30);
#Verluste für Essen
#nach Mahlzeit und Gastanzahl checken und multiplizieren!
gesamtVerlust_food = dim(clndata_noshow)[1] + sum(clndata_storno$storno_Vorlauf <= 7)
