#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata$is_repeated_guest <- string::rstr_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
#library (stringr)
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata$is_repeated_guest <- stringr::rstr_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
#library (stringr)
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
clndata$is_repeated_guest
clndata
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
#library (stringr)
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
clndata
rawdata = read.csv("data_sss.csv")
#Datenbereinigung
clndata = rawdata
clndata
#Datenbereinigung
clndata = rawdata
#Buchungen löschen, die keine Anzahl an Tagen haben
clndata = clndata[!(clndata$stay_totaldays == 0),]
#Buchungen löschen bei denen keine Gastanzahl gegeben ist
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
#Datenbereinigung
clndata
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
clndata = rawdata
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
clndata$is_repeated_guest
summary(clndata$is_repeated_guest)
summary(rawdata)
str(rawdata)
as.table(clndata)
table(clndata)
table(clndata$is_repeated_guest)
table(rawdata$is_repeated_guest)
clndata = clndata[!(clndata$stay_totaldays == 0),]
clndata
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
rawdata = read.csv("data_sss.csv")
clndata = rawdata
clndata = clndata[!(clndata$adults == 0 & clndata$children == 0),]
clndata
rawdata = read.csv("data_sss.csv")
# Packages laden
library(ggplot2)
library(dplyr)
library(tidyr)
#Tabelle einlesen
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
rawdata[rawdata$adults == 0 & rawdata$children == 0,]
# to do
clndata = rawdata
# Feature Engineering
clndata$stays_in_nights = clndata$stays_in_week_nights + clndata$stays_in_weekend_nights
# ... und viele weitere
#wie viele wurden insgesamt gecancelled
table(cleandata$is_canceled)
cleandata
#wie viele wurden insgesamt gecancelled
table(clndata$is_canceled)
cat("\n")
#ggf. Korrelationen abchecken
cor(clndata$is_canceled, clndata[, c("lead_time", "stays_in_nights", "babies")])
# ... und viele weitere
#ggf Haeufigkeitstabellen ansehen
meal_types = aggregate(is_canceled ~ meal, clndata, sum)
meal_types$amount = table(clndata$meal)
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
#library (stringr)
#Datenbereinigung
clndata = rawdata
#repeated_guest "no" mit "0" ersetzen
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
summary(clndata)
RegionsverkaufGesamt = aggregate(reserved_room_type ~ adr,data=clndata, mean)
RegionsverkaufGesamt = aggregate(reserved_room_type ~ adr,data=clndata, mean)
RegionsverkaufGesamt = aggregate(reserved_room_type ~ adr,data=clndata, mean)
knitr::opts_chunk$set(echo = TRUE)
# Laden des GGally Packages
library("GGally")
library("knitr")
rawdata = read.csv("data_sss.csv")
#Daten zusammenfassen
cat("Struktur der Daten:\n\n")
str(rawdata)
cat("\n\nZusammenfassung:\n\n")
summary(rawdata)
#Datenbereinigung
clndata = rawdata
#repeated_guest "no" mit "0" ersetzen
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
summary(clndata)
clndatacity = subset(clndata, hotel== "Resort Hotel")
clndataresort = subset(clndata, hotel== "City Hotel")
#library (stringr)
#Datenbereinigung
clndata = rawdata
#repeated_guest "no" mit "0" ersetzen
clndata$is_repeated_guest <- stringr::str_replace_all (clndata$is_repeated_guest,pattern="no",repl="0")
summary(clndata)
adr_roomtype = aggregate(adr ~ reserved_room_type,data=clndata, mean)
adr_roomtype
adr_assigned_roomtype = aggregate(adr ~ assigned_room_type,data=clndata, mean)
adr_assigned_roomtype
agent = aggregate(is_canceled ~ agent,data=clndata, mean)
agent
company = aggregate(is_canceled ~ company,data=clndata, mean)
company
deposit = aggregate(is_canceled ~ deposit_type,data=clndata, mean)
deposit
customer_type = aggregate(is_canceled ~ customer_type,data=clndata, mean)
customer_type
previous_bookings_not_canceled = aggregate(is_canceled ~ previous_bookings_not_canceled,data=clndata, mean)
previous_bookings_not_canceled
is_repeated_guest = aggregate(is_canceled ~ is_repeated_guest,data=clndata, mean)
is_repeated_guest
distribution_channel = aggregate(is_canceled ~ distribution_channel,data=clndata, mean)
distribution_channel
market_segment = aggregate(is_canceled ~ market_segment,data=clndata, mean)
market_segment
meal = aggregate(is_canceled ~ meal,data=clndata, mean)
meal
country = aggregate(is_canceled ~ country,data=clndata, mean)
country
country <- country[order(country$is_canceled,decreasing=T),]
head(country[c("country","is_canceled")],5)
arrival_date_year = aggregate(is_canceled ~ arrival_date_year,data=clndata, mean)
arrival_date_year
arrival_date_month = aggregate(is_canceled ~ arrival_date_month,data=clndata, mean)
arrival_date_month
hotel = aggregate(is_canceled ~ hotel,data=clndata, mean)
hotel
AggregateIFR = aggregate(clndata$adr, list(clndata$reserved_room_type,clndata$adults), mean)
AggregateIFR
#median passt sehr gut
AggregateIFR1 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults), median)
AggregateIFR1
AggregateIFR2 = aggregate(clndatacity$adr, list(clndatacity$reserved_room_type,clndatacity$adults,clndatacity$children,clndatacity$meal), median)
AggregateIFR2
AggregateIFR2 <- AggregateIFR2[order(AggregateIFR2$Group.1,decreasing=FALSE),]
colnames(AggregateIFR2) = c("Room_Type","adults","children","meal","adr")
AggregateIFR2 <- subset(AggregateIFR2, !meal
== "Undefined")
AggregateIFR2 <- subset(AggregateIFR2, !adults == "0")
AggregateIFR2 <- subset(AggregateIFR2, !adr == "0")
kable(AggregateIFR2, caption = "AggregateOTDShangh")
clndatacity <- subset(clndatacity, !meal
== "Undefined")
clndatacity <- subset(clndatacity, !adults == "0")
clndatacity <- subset(clndatacity, !adr == "0")
require(dplyr)
clndatacity %>% count(reserved_room_type,adults,children,meal)
# Anzahl einfügen
Auslastung = data.frame( Datum = seq(as.Date(rawdata_showup$checkin_date[1]),
as.Date(tail(rawdata_showup$reservation_status_date,n=1)),
by="days"))
#Kapazitäten der beiden Hotels speichern
capLis = data.frame(Zimmer = 403,
Parkpl = 20,
Sitzpl = 200,
Babysitzpl = 20)
capAlga = data.frame(Zimmer = 318,
Parkpl = 50,
Sitzpl = 800,
Babysitzpl = 10)
#was ist mit Typ undefined?
unique(rawdata$market_segment)
unique(rawdata$meal)
unique(rawdata$distribution_channel)
unique(rawdata$country) #hier heißts NULL
#andere Anzahl belegter Raumtypen als reservierte?
unique(rawdata$reserved_room_type)
unique(rawdata$assigned_room_type)
#Kinder oder Babies ohne Erwachsenen da?
rawdata[rawdata$adults == 0 & (rawdata$children != 0 | rawdata$babies !=0),]
Sys.setlocale("LC_ALL","English")
rawdata$checkin_date = as.Date(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")
#0–6 day of the week, starting on Sunday.
rawdata$wkday=as.POSIXlt(paste(rawdata$arrival_date_day_of_month, rawdata$arrival_date_month, rawdata$arrival_date_year,sep = "/"),format="%d/%B/%Y")$wday
#check for weekend (0,5,6)
rawdata$wkend = rawdata$wkday > 4|rawdata$wkday == 0
#nur die Gäste, die tatsächlich gekommen sind
rawdata_showup = rawdata[rawdata$reservation_status== "Check-Out",]
rawdata_showup$stay_totaldays=as.numeric(as.Date(rawdata_showup$reservation_status_date)-rawdata_showup$checkin_date)
#komische hohe Werte!
unique(rawdata_showup$stay_totaldays)
#check for correctness of Weekend/weekday entries
for(i in (1:length(rawdata_showup$stay_totaldays))){
wkendcntr=0
wkdaycntr=0
datum = rawdata_showup$wkdaymod[i]
total = rawdata_showup$stay_totaldays[i]
cmpltweeks = floor((datum+total)/7)
rest = (datum+total) %% 7
wkendcntr= cmpltweeks*2
if(rest == 6){
wkendcntr= wkendcntr+1
}
rawdata_showup$stays_in_week_nights_corr[i] = total-wkendcntr
rawdata_showup$stays_in_weekend_nights_corr[i] = wkendcntr
}
rawdata_showup
unique(rawdata_showup$stay_totaldays)
for(i in (1:length(rawdata_showup$stay_totaldays))){
wkendcntr=0
wkdaycntr=0
checkin_wkday = rawdata_showup$wkday[i]
total = rawdata_showup$stay_totaldays[i]
cmpltweeks = floor((checkin_wkday+total)/7)
rest = (checkin_wkday+total) %% 7
wkendcntr= cmpltweeks*2
if(rest == 6){
wkendcntr= wkendcntr+1
}
rawdata_showup$stays_in_week_nights_corr[i] = total-wkendcntr
rawdata_showup$stays_in_weekend_nights_corr[i] = wkendcntr
}
Auslastung = data.frame( Datum = seq(as.Date(rawdata_showup$checkin_date[1]),
as.Date(tail(rawdata_showup$reservation_status_date,n=1)),
by="days"))
Auslastung$ZimAuslResort= 0
rawdata_showup_resort = rawdata_showup[rawdata_showup$hotel == "Resort Hotel",]
for(i in (1:length(rawdata_showup_resort$stay_totaldays))){
for (j in 1:rawdata_showup_resort$stay_totaldays[i]){
Auslastung$ZimAuslResort[j] = Auslastung$ZimAuslResort[j]+1;
}
}
View(Auslastung)
View(Auslastung)
for (j in 1:6){
Auslastung$ZimAuslResort[j] = Auslastung$ZimAuslResort[j]+1;
}
Auslastung$ZimAuslResort = 0
for (j in 1:6){
Auslastung$ZimAuslResort[j] = Auslastung$ZimAuslResort[j]+1;
}
Auslastung$ZimAuslResort = 0
Auslastung$ZimAuslResort= 0
rawdata_showup_resort = rawdata_showup[rawdata_showup$hotel == "Resort Hotel",]
for(i in (1:length(rawdata_showup_resort$stay_totaldays))){
for (j in 1:rawdata_showup_resort$stay_totaldays[i]){
Auslastung$ZimAuslResort[i] = Auslastung$ZimAuslResort[j]+1;
}
}
Auslastung = data.frame( Datum = seq(as.Date(rawdata_showup$checkin_date[1]),
as.Date(tail(rawdata_showup$reservation_status_date,n=1)),
by="days"))
Auslastung$ZimAuslResort= 0
rawdata_showup_resort = rawdata_showup[rawdata_showup$hotel == "Resort Hotel",]
for(i in (1:length(rawdata_showup_resort$stay_totaldays))){
for (j in 1:rawdata_showup_resort$stay_totaldays[i]){
Auslastung$ZimAuslResort[i] = Auslastung$ZimAuslResort[i]+1;
}
}
Auslastung = data.frame( Datum = seq(as.Date(rawdata_showup$checkin_date[1]),
as.Date(tail(rawdata_showup$reservation_status_date,n=1)),
by="days"))
Auslastung$ZimAuslResort= 0
rawdata_showup_resort = rawdata_showup[rawdata_showup$hotel == "Resort Hotel",]
for(i in (1:length(rawdata_showup_resort$stay_totaldays))){
for (j in 1:rawdata_showup_resort$stay_totaldays[i]){
if (i<=800)
Auslastung$ZimAuslResort[i] = Auslastung$ZimAuslResort[i]+1;
}
}
length(rawdata_showup_resort$stay_totaldays)
idx = which(Auslastung$Datum == rawdata_showup_resort[i])
idx = which(Auslastung$Datum == rawdata_showup_resort$checkin_date[1])
idx = which(Auslastung$Datum == rawdata_showup_resort$checkin_date[7])
Auslastung$ZimAuslResort= 0
rawdata_showup_resort = rawdata_showup[rawdata_showup$hotel == "Resort Hotel",]
for(i in (1:length(rawdata_showup_resort$stay_totaldays))){
idx = which(Auslastung$Datum == rawdata_showup_resort$checkin_date[i])
for (idx in idx:(idx+rawdata_showup_resort$stay_totaldays[i])){
Auslastung$ZimAuslResort[idx] = Auslastung$ZimAuslResort[idx]+1;
}
}
idx = which(Auslastung$Datum == rawdata_showup_resort$checkin_date[100])
Auslastung$ZimAuslResort= 0
idx = 0
for (idx in idx:(idx+4)){
Auslastung$ZimAuslResort[idx] = Auslastung$ZimAuslResort[idx]+1;
}
idx = 7
for (idx in idx:(idx+4)){
Auslastung$ZimAuslResort[idx] = Auslastung$ZimAuslResort[idx]+1;
}
idx = 7
for (idx in idx:(idx+4)){
Auslastung$ZimAuslResort[idx] = Auslastung$ZimAuslResort[idx]+1;
}
Auslastung = data.frame( Datum = seq(as.Date(rawdata_showup$checkin_date[1]),
as.Date(tail(rawdata_showup$reservation_status_date,n=1)),
by="days"))
Auslastung$ZimAuslResort= 0
rawdata_showup_resort = rawdata_showup[rawdata_showup$hotel == "Resort Hotel",]
for(i in (1:length(rawdata_showup_resort$stay_totaldays))){
idx = which(Auslastung$Datum == rawdata_showup_resort$checkin_date[i])
for (j in idx:(idx+rawdata_showup_resort$stay_totaldays[i])){
Auslastung$ZimAuslResort[j] = Auslastung$ZimAuslResort[j]+1;
}
}
tail(rawdata_showup$reservation_status_date, n = 1)
tail(rawdata_showup$checkin_date, n = 1)
tail(rawdata_showup$reservation_status_date, n = 1)-tail(rawdata_showup$checkin_date, n = 1)
as.Date(tail(rawdata_showup$reservation_status_date, n = 1))-as.Date(tail(rawdata_showup$checkin_date, n = 1))
Auslastung$ZimAuslResort= 0
rawdata_showup_resort = rawdata_showup[rawdata_showup$hotel == "Resort Hotel",]
for(i in (1:length(rawdata_showup_resort$stay_totaldays))){
idx = which(Auslastung$Datum == rawdata_showup_resort$checkin_date[i])
for (j in idx:(idx+rawdata_showup_resort$stay_totaldays[i]-1)){
Auslastung$ZimAuslResort[j] = Auslastung$ZimAuslResort[j]+1;
}
}
idx+rawdata_showup_resort$stay_totaldays[i]
idx+rawdata_showup_resort$stay_totaldays[i]-1
rawdata_showup_resort$checkin_date[i]
rawdata_showup_resort$stay_totaldays[i]
as.Date(rawdata_showup_resort$checkin_date[i])+13
rawdata_showup_resort$reservation_status_date[i]
min(rawdata_showup$reservation_status_date)
max(rawdata_showup$reservation_status_date)
Auslastung = data.frame(Datum = seq(as.Date(min(rawdata_showup$checkin_date)),
as.Date(max(rawdata_showup$reservation_status_date)),
by="days"))
Auslastung$ZimAuslResort= 0
rawdata_showup_resort = rawdata_showup[rawdata_showup$hotel == "Resort Hotel",]
for(i in (1:length(rawdata_showup_resort$stay_totaldays))){
idx = which(Auslastung$Datum == rawdata_showup_resort$checkin_date[i])
for (j in idx:(idx+rawdata_showup_resort$stay_totaldays[i]-1)){
Auslastung$ZimAuslResort[j] = Auslastung$ZimAuslResort[j]+1;
}
}
summary(Auslastung$ZimAuslResort)
unique(rawdata_showup$hotel)
rawdata_showup_Lis = rawdata_showup[rawdata_showup$hotel == "City Hotel",]
Auslastung$ZimAuslLis= 0
for(i in (1:length(rawdata_showup_Lis$stay_totaldays))){
idx = which(Auslastung$Datum == rawdata_showup_Lis$checkin_date[i])
for (j in idx:(idx+rawdata_showup_Lis$stay_totaldays[i]-1)){
Auslastung$ZimAuslLis[j] = Auslastung$ZimAuslLis[j]+1;
}
}
summary(Auslastung$ZimAuslLis)
rawdata_showup_Lis$reserved_room_type
unique(rawdata_showup_Lis$assigned_room_type)
sort(unique(rawdata_showup_Lis$assigned_room_type))
sort(unique(rawdata_showup_Lis$reserved_room_type))
Auslastung$room_types_resort[1]
Auslastung$room_types_resort[1]=0
View(Auslastung)
View(Auslastung)
room_types_resort[1
room_types_resort[1]
room_types_resort[1]
room_types_resort= sort(unique(rawdata_showup_Lis$assigned_room_type))
room_types_resort[1]
Auslastung$room_types_resort[1]=0
View(Auslastung)
View(Auslastung)
test = room_types_resort[1]
Auslastung$test
Auslastung$test=0
Auslastung$room_types_resort[1]
colnames(Auslastung)
colnames(Auslastung) = "test2"
colnames(Auslastunung)
colnames(Auslastung)
colnames(Auslastung)[1]="neu"
colnames(Auslastung)
sort(unique(rawdata_showup$assigned_room_type))
room_types= sort(unique(rawdata_showup$assigned_room_type))
colnames(Aulastung)[2:] = room_types
room_types= sort(unique(rawdata_showup$assigned_room_type))
colnames(Aulastung)[2] = room_types
colnames(Auslastung)[2] = room_types
colnames(Auslastung)[2:length(room_types)] = room_types
length(room_types)
clear Auslastung
rm(Auslastung)
Auslastung = data.frame(Datum = seq(as.Date(min(rawdata_showup$checkin_date)),
as.Date(max(rawdata_showup$reservation_status_date)),
by="days"))
room_types= sort(unique(rawdata_showup$assigned_room_type))
colnames(Auslastung)[2:length(room_types)] = room_types
as.names(room_types)
eval(parse(room_types))
Auslastung$A = 0;
Auslastung$B = 0;
Auslastung$C = 0;
Auslastung$D = 0;
Auslastung$E = 0;
Auslastung$F = 0;
Auslastung$G = 0;
Auslastung$H = 0;
Auslastung$I = 0;
Auslastung$J = 0;
Auslastung$K = 0;
room_types
rawdata_showup_resort$assigned_room_type[1]
rawdata_showup_resort$assigned_room_type[2]
rawdata_showup_resort$assigned_room_type[3]
switch(rawdata_showup_resort$assigned_room_type[1],
"A" = {Auslastung$A[idx] = Auslastung$A[idx]+1},
"B" = {Auslastung$B[idx] = Auslastung$B[idx]+1},
"C" = {Auslastung$C[idx] = Auslastung$C[idx]+1}
)
idx = 0
switch(rawdata_showup_resort$assigned_room_type[1],
"A" = {Auslastung$A[idx] = Auslastung$A[idx]+1},
"B" = {Auslastung$B[idx] = Auslastung$B[idx]+1},
"C" = {Auslastung$C[idx] = Auslastung$C[idx]+1}
)
idx = 1
switch(rawdata_showup_resort$assigned_room_type[1],
"A" = {Auslastung$A[idx] = Auslastung$A[idx]+1},
"B" = {Auslastung$B[idx] = Auslastung$B[idx]+1},
"C" = {Auslastung$C[idx] = Auslastung$C[idx]+1}
)
View(Auslastung)
View(Auslastung)
Auslastung$ZimAuslResort= 0
rawdata_showup_resort = rawdata_showup[rawdata_showup$hotel == "Resort Hotel",]
for(i in (1:length(rawdata_showup_resort$stay_totaldays))){
idx = which(Auslastung$Datum == rawdata_showup_resort$checkin_date[i])
switch(rawdata_showup_resort$assigned_room_type[i],
"A" = {Auslastung$A[idx] = Auslastung$A[idx]+1},
"B" = {Auslastung$B[idx] = Auslastung$B[idx]+1},
"C" = {Auslastung$C[idx] = Auslastung$C[idx]+1},
"D" = {Auslastung$D[idx] = Auslastung$D[idx]+1},
"E" = {Auslastung$E[idx] = Auslastung$E[idx]+1},
"F" = {Auslastung$F[idx] = Auslastung$F[idx]+1},
"G" = {Auslastung$G[idx] = Auslastung$G[idx]+1},
"H" = {Auslastung$H[idx] = Auslastung$H[idx]+1},
"I" = {Auslastung$I[idx] = Auslastung$I[idx]+1},
"K" = {Auslastung$K[idx] = Auslastung$K[idx]+1}
)
for (j in idx:(idx+rawdata_showup_resort$stay_totaldays[i]-1)){
Auslastung$ZimAuslResort[j] = Auslastung$ZimAuslResort[j]+1;
}
}
rawdata_showup_Lis = rawdata_showup[rawdata_showup$hotel == "City Hotel",]
Auslastung$ZimAuslLis= 0
for(i in (1:length(rawdata_showup_Lis$stay_totaldays))){
idx = which(Auslastung$Datum == rawdata_showup_Lis$checkin_date[i])
switch(rawdata_showup_resort$assigned_room_type[i],
"A" = {Auslastung$A[idx] = Auslastung$A[idx]+1},
"B" = {Auslastung$B[idx] = Auslastung$B[idx]+1},
"C" = {Auslastung$C[idx] = Auslastung$C[idx]+1},
"D" = {Auslastung$D[idx] = Auslastung$D[idx]+1},
"E" = {Auslastung$E[idx] = Auslastung$E[idx]+1},
"F" = {Auslastung$F[idx] = Auslastung$F[idx]+1},
"G" = {Auslastung$G[idx] = Auslastung$G[idx]+1},
"H" = {Auslastung$H[idx] = Auslastung$H[idx]+1},
"I" = {Auslastung$I[idx] = Auslastung$I[idx]+1},
"K" = {Auslastung$K[idx] = Auslastung$K[idx]+1}
)
for (j in idx:(idx+rawdata_showup_Lis$stay_totaldays[i]-1)){
Auslastung$ZimAuslLis[j] = Auslastung$ZimAuslLis[j]+1;
}
}
#beide mega schllecht ausgelastet! Stimmt so?
summary(Auslastung$ZimAuslLis)
summary(Auslastung$ZimAusResort)
View(Auslastung)
View(Auslastung)
